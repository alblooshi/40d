{"ast":null,"code":"var _jsxFileName = \"E:\\\\abdulla\\\\developedbyed\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport \"./styles/app.scss\"; //Import Components\n\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\"; //Import data\n\nimport chillhop from \"./data\"; //Util\n\nimport { playAudio } from \"./util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //Ref\n  const audioRef = useRef(null);\n  const [songs, setSongs] = useState(chillhop());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n    volume: 0\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const percentage = Math.round(roundedCurrent / roundedDuration * 100);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration: duration,\n      animationPercentage: percentage,\n      volume: e.target.volume\n    });\n  };\n\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    playAudio(isPlaying, audioRef);\n    return;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${libraryStatus ? \"library-active\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0627\\u0644\\u0623\\u0631\\u0628\\u0639\\u064A\\u0646 \\u0641\\u064A \\u062F\\u0639\\u0627\\u0621 \\u0631\\u0628 \\u0627\\u0644\\u0639\\u0627\\u0644\\u0645\\u064A\\u0646  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      isPlaying: isPlaying,\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      setIsPlaying: setIsPlaying,\n      currentSong: currentSong,\n      isPlaying: isPlaying,\n      songInfo: songInfo,\n      setSongInfo: setSongInfo,\n      songs: songs,\n      setSongs: setSongs,\n      setCurrentSong: setCurrentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      audioRef: audioRef,\n      isPlaying: isPlaying,\n      setSongs: setSongs,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onLoadedMetadata: timeUpdateHandler,\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio,\n      onEnded: songEndHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2Tp3r+CdszrNKOMmxlsZS648NtI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/abdulla/developedbyed/src/App.js"],"names":["React","useState","useRef","Player","Song","Library","Nav","chillhop","playAudio","App","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","animationPercentage","volume","libraryStatus","setLibraryStatus","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","roundedDuration","percentage","songEndHandler","currentIndex","findIndex","song","id","length","audio"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./styles/app.scss\";\n//Import Components\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\n//Import data\nimport chillhop from \"./data\";\n//Util\nimport { playAudio } from \"./util\";\n\nfunction App() {\n  //Ref\n  const audioRef = useRef(null);\n\n  const [songs, setSongs] = useState(chillhop());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n    volume: 0,\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const percentage = Math.round((roundedCurrent / roundedDuration) * 100);\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration: duration,\n      animationPercentage: percentage,\n      volume: e.target.volume,\n    });\n  };\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    playAudio(isPlaying, audioRef);\n    return;\n  };\n  return (\n    <div className={`App ${libraryStatus ? \"library-active\" : \"\"}`}>\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <h2>الأربعين في دعاء رب العالمين  </h2>\n      <Song isPlaying={isPlaying} currentSong={currentSong} />\n      <Player\n        audioRef={audioRef}\n        setIsPlaying={setIsPlaying}\n        currentSong={currentSong}\n        isPlaying={isPlaying}\n        songInfo={songInfo}\n        setSongInfo={setSongInfo}\n        songs={songs}\n        setSongs={setSongs}\n        setCurrentSong={setCurrentSong}\n      />\n      <Library\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setSongs={setSongs}\n        libraryStatus={libraryStatus}\n      />\n      <audio\n        onLoadedMetadata={timeUpdateHandler}\n        onTimeUpdate={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n        onEnded={songEndHandler}\n       \n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}